[
  {
    "type": "mc",
    "question": "מהו החיסרון המרכזי של ייצוג תלת-ממד באמצעות ווקסלים (Voxels) שהוביל לפיתוח שיטות אחרות?",
    "options": [
      "קושי בייצוג צבעים וטקסטורות",
      "צריכת זיכרון וחישוב גבוהה מאוד ככל שהרזולוציה עולה",
      "חוסר יכולת לייצג צורות מורכבות באופן מדויק",
      "חוסר התאמה לאנימציה בגרפיקה ממוחשבת"
    ],
    "correctAnswerIndex": 1,
    "explanation": "ווקסלים הם רשת תלת-ממדית (grid), והגדלת הרזולוציה כדי לקבל פרטים דורשת הגדלה מעריכית של כמות הווקסלים, מה שמוביל לצריכת זיכרון וכוח חישוב אדירים."
  },
  {
    "type": "mc",
    "question": "איזה מהבאים אינו מאפיין של ייצוג מסוג 'ענן נקודות' (Point Cloud)?",
    "options": [
      "רשימה לא מסודרת של קואורדינטות XYZ",
      "ערכים מסוג נקודה צפה (floating point)",
      "מבנה רגולרי ומסודר כמו רשת (grid)",
      "אינווריאנטי לשינוי סדר הנקודות (permutation invariant)"
    ],
    "correctAnswerIndex": 2,
    "explanation": "ענן נקודות הוא אוסף של נקודות במרחב ללא מבנה קבוע או סדר מוגדר, בניגוד לרשת ווקסלים למשל שהיא בעלת מבנה רגולרי."
  },
  {
    "type": "mc",
    "question": "מהי המטרה העיקרית של מודל NeRF (Neural Radiance Fields)?",
    "options": [
      "לייצג סצנה תלת-ממדית כאוסף של גאוסיאנים",
      "לחזות מרחק מכוון (signed distance) מפני השטח של אובייקט",
      "ללמוד פונקציה הממפה מיקום (x,y,z) וזווית צפייה (θ,φ) לצבע וצפיפות",
      "לייצר ענן נקודות תלת-ממדי מתמונה בודדת"
    ],
    "correctAnswerIndex": 2,
    "explanation": "NeRF מייצג סצנה באמצעות רשת נוירונים שלומדת להוציא צבע (RGB) וצפיפות (density) עבור כל נקודה במרחב הנצפית מכיוון מסוים, ובכך מאפשרת רינדור של תמונות מזוויות חדשות."
  },
  {
    "type": "mc",
    "question": "מהו היתרון המרכזי של 3D Gaussian Splatting על פני NeRF?",
    "options": [
      "איכות רינדור גבוהה יותר באופן משמעותי",
      "מהירות רינדור גבוהה בהרבה בזמן אמת",
      "יכולת ייצוג טובה יותר של אובייקטים שקופים",
      "צורך בפחות תמונות קלט לצורך האימון"
    ],
    "correctAnswerIndex": 1,
    "explanation": "הבעיה המרכזית של NeRF הייתה זמן הרינדור האיטי שדרש שאילתות רבות לרשת העצבית. Gaussian Splatting פתר זאת על ידי שימוש בייצוג מפורש (אוסף גאוסיאנים) שמאפשר רינדור מהיר על ידי הטלה (projection) שלהם לתמונה, ללא צורך בהרצת רשת עמוקה בזמן הרינדור."
  },
  {
    "type": "mc",
    "question": "במודל SDF (Signed Distance Function), מה מייצג ערך שלילי?",
    "options": [
      "נקודה הנמצאת מחוץ לאובייקט",
      "נקודה הנמצאת בדיוק על פני השטח של האובייקט",
      "נקודה הנמצאת בתוך האובייקט",
      "נקודה שאין לגביה מידע"
    ],
    "correctAnswerIndex": 2,
    "explanation": "ב-SDF, המרחק הוא מכוון: ערכים חיוביים מייצגים נקודות מחוץ למשטח, ערכים שליליים מייצגים נקודות בתוך המשטח, וערך 0 מייצג את המשטח עצמו."
  },
  {
    "type": "mc",
    "question": "מהי התרומה המרכזית של DeepSDF בהשוואה ל-SDF בסיסי?",
    "options": [
      "הוא מאפשר רינדור מהיר יותר",
      "הוא יודע לייצג רק צורות פשוטות",
      "הוא מאפשר לרשת ללמוד לייצג אוסף של צורות שונות, לא רק צורה בודדת",
      "הוא משתמש בענני נקודות במקום ברשת נוירונים"
    ],
    "correctAnswerIndex": 2,
    "explanation": "בעוד שרשת SDF פשוטה אומנה לייצג צורה אחת ספציפית, DeepSDF הרחיב את הרעיון על ידי הוספת וקטור חבוי (latent vector) כקלט לרשת, המייצג אובייקט ספציפי מתוך סט נתונים. כך, הרשת לומדת לייצג צורות רבות ושונות."
  },
  {
    "type": "mc",
    "question": "בתהליך הרינדור של NeRF, מה מייצג הפרמטר $T_i$ בנוסחת הצבע $C=\\Sigma w_i c_i$?",
    "options": [
      "הצבע של הנקודה ה-i",
      "ההסתברות שקרן אור תעבור דרך הנקודה ה-i",
      "המרחק של הנקודה ה-i מהמצלמה",
      "ההסתברות שקרן אור תגיע לנקודה i מבלי לפגוע בחלקיקים אחרים בדרך"
    ],
    "correctAnswerIndex": 3,
    "explanation": "הפרמטר $T_i$ מייצג את השקיפות המצטברת (accumulated transmittance), כלומר מה הסיכוי שהקרן שרדה והגיעה עד לנקודה i מבלי להיעצר על ידי נקודות קודמות (j<i) שהיו בדרכה."
  },
  {
    "type": "mc",
    "question": "מהם ארבעת הפרמטרים המגדירים כל גאוסיאן תלת-ממדי במודל 3D Gaussian Splatting?",
    "options": [
      "מיקום, גודל, צבע, שקיפות",
      "ממוצע (מיקום), מטריצת שונות (צורה וסיבוב), אטימות (opacity), ופרמטרים של צבע",
      "קואורדינטות XYZ, וקטור נורמל, רדיוס, צבע",
      "מיקום, זווית צפייה, צפיפות, טקסטורה"
    ],
    "correctAnswerIndex": 1,
    "explanation": "כל גאוסיאן מוגדר על ידי ממוצע (וקטור XYZ המייצג מיקום), מטריצת שונות (covariance) המגדירה את צורתו וסיבובו, אטימות (כמה אור הוא חוסם), ופרמטרים של צבע המיוצגים על ידי הרמוניות ספריות (Spherical Harmonics)."
  },
  {
    "type": "mc",
    "question": "מהי המטרה של Score Distillation Sampling (SDS) Loss בתהליך יצירת NeRF מטקסט?",
    "options": [
      "לשפר את מהירות הרינדור של ה-NeRF",
      "לאמן את ה-NeRF להיות דומה לטקסט נתון, באמצעות הדרכה ממודל דיפוזיה קפוא (pre-trained)",
      "להמיר את ה-NeRF לייצוג של ענן נקודות",
      "להוסיף טקסטורות ריאליסטיות למאש (mesh) קיים"
    ],
    "correctAnswerIndex": 1,
    "explanation": "SDS הוא תהליך שבו מרנדרים תמונה מה-NeRF, מוסיפים לה רעש, ומשתמשים במודל דיפוזיה (כמו Imagen) כדי לחזות את הרעש. ההפרש בין הרעש החזוי לרעש המקורי משמש כגרדיאנט כדי לעדכן את משקולות ה-NeRF כך שהתמונות שהוא ירנדר יתאימו יותר לתיאור הטקסטואלי שהנחה את מודל הדיפוזיה."
  },
  {
    "type": "mc",
    "question": "מה תפקיד מנגנון ה-'Adaptive Density Control' ב-3D Gaussian Splatting?",
    "options": [
      "לשנות את צבע הגאוסיאנים כדי להתאים לתאורה",
      "להתאים את צפיפות הגאוсиאנים במרחב על ידי שכפול, פיצול או מחיקה שלהם במהלך האימון",
      "לשלוט על צפיפות הפיקסלים בתמונה המרונדרת",
      "למנוע התפוצצות גרדיאנטים במהלך האופטימיזציה"
    ],
    "correctAnswerIndex": 1,
    "explanation": "מנגנון זה מבצע אופטימיזציה למספר ופיזור הגאוסיאנים. הוא יכול לשכפל גאוסיאנים באזורים שדורשים יותר פירוט (גרדיאנט גדול), לפצל גאוסיאנים גדולים מדי, או למחוק גאוסיאנים שהפכו כמעט שקופים ואינם תורמים לסצנה."
  },
  {
    "type": "mc",
    "question": "בשיטה האיטרטיבית לצביעת אובייקט באמצעות trimap, מה מייצג הצבע הכחול?",
    "options": [
      "אזורים שצבועים נכון ויש לשמור עליהם",
      "אזורים שעדיין לא נצבעו כלל",
      "אזורים שצריך לשמר את צבעם אך לשפר אותו באיטרציה הבאה",
      "אזורים שיש למחוק מהמודל"
    ],
    "correctAnswerIndex": 2,
    "explanation": "הצבע הכחול ב-trimap מסמן אזורים שכבר נצבעו, אך מזווית צפייה לא אידיאלית. לכן, רוצים לשמר את המידע שיש שם אך לאפשר למודל לשפר ולעדכן את הצבע באיטרציות עתידיות מזוויות מבט טובות יותר."
  },
  {
    "type": "mc",
    "question": "מהי הפונקציונליות המרכזית של מודל Zero-1-to-3?",
    "options": [
      "ליצור אובייקט תלת-ממדי מאפס על בסיס טקסט",
      "לייצר תמונה של אובייקט מזווית צפייה חדשה, בהינתן תמונה בודדת וזוויות יעד",
      "להמיר מודל NeRF למודל Gaussian Splatting",
      "לשפר את האיכות של תמונות מרונדרות"
    ],
    "correctAnswerIndex": 1,
    "explanation": "Zero-1-to-3 אומן לבצע סיבוב של אובייקט בתמונה. הוא מקבל תמונת קלט אחת ואת פרמטרי הסיבוב הרצויים (R, T) ומייצר תמונה חדשה של האובייקט מאותה זווית."
  },
  {
    "type": "mc",
    "question": "כיצד ניתן להשתמש ב-Zero-1-to-3 כדי ליצור NeRF מתמונה בודדת?",
    "options": [
      "המודל חוזה ישירות את משקולות ה-NeRF",
      "המודל משמש ליצירת מספר רב של תמונות של האובייקט מזוויות שונות, ואז משתמשים בתמונות אלו כדי לאמן NeRF",
      "המודל ממיר את התמונה לענן נקודות, שממנו בונים את ה-NeRF",
      "המודל לא יכול לשמש ליצירת NeRF, רק לסיבוב תמונות"
    ],
    "correctAnswerIndex": 1,
    "explanation": "הרעיון הוא להשתמש ב-Zero-1-to-3 כדי לייצר סט נתונים סינתטי של תמונות מזוויות שונות (multi-view images) מתמונת הקלט הבודדת. סט נתונים זה משמש לאחר מכן כקלט לתהליך האימון הסטנדרטי של NeRF."
  },
  {
    "type": "mc",
    "question": "איזה סוג ייצוג תלת-ממדי נחשב ליעיל במיוחד עבור אמנים ואנימציה בגרפיקה ממוחשבת?",
    "options": [
      "ווקסלים (Voxels)",
      "ענן נקודות (Point Cloud)",
      "מאש (Mesh)",
      "שדה מרחק מכוון (SDF)"
    ],
    "correctAnswerIndex": 2,
    "explanation": "מאשים (Meshes) הם הייצוג הפופולרי ביותר בגרפיקה ממוחשבת, במיוחד לאנימציה ועבודה של אמנים, מכיוון שהם מאפשרים שליטה מדויקת על פני השטח, קלים לעריכה ומייצגים טופולוגיה בצורה יעילה."
  },
  {
    "type": "mc",
    "question": "מהו ההבדל המהותי בין ייצוג 'מפורש' (Explicit) לייצוג 'מרומז' (Implicit)?",
    "options": [
      "ייצוג מפורש משתמש ברשת נוירונים, ומרומז לא",
      "ייצוג מפורש מתאר ישירות את פני השטח (למשל, על ידי רשימת נקודות או פוליגונים), בעוד ייצוג מרומז מגדיר את השטח באמצעות פונקציה",
      "ייצוג מפורש טוב יותר לצבעים, ומרומז טוב יותר לצורה",
      "ייצוג מפורש דורש יותר זיכרון"
    ],
    "correctAnswerIndex": 1,
    "explanation": "ייצוגים מפורשים כמו מאשים או ענני נקודות מגדירים את הגיאומטריה באופן ישיר. ייצוגים מרומזים כמו SDF או NeRF מגדירים פונקציה (לרוב מיושמת על ידי רשת נוירונים) שניתן לשאול אותה לגבי תכונות של נקודות במרחב (למשל, האם הנקודה בפנים/בחוץ), והמשטח מוגדר כקבוצת האפסים של הפונקציה."
  },
  {
    "type": "mc",
    "question": "מהו השלב הראשון במודל Shape-E ליצירת אובייקטים תלת-ממדיים?",
    "options": [
      "אימון מודל דיפוזיה על תמונות",
      "אימון Encoder שממפה אובייקט תלת-ממדי לייצוג חבוי של משקולות SDF",
      "יצירת ענן נקודות מהטקסט",
      "רינדור של תמונות מזוויות שונות"
    ],
    "correctAnswerIndex": 1,
    "explanation": "בשלב הראשון, Shape-E לומד לקודד אובייקטים תלת-ממדיים קיימים (מתוך דאטה-סט גדול) לייצוג חבוי. ייצוג זה הוא למעשה סט של משקולות עבור רשת MLP קטנה שמגדירה SDF. בשלב השני, מאמנים מודל דיפוזיה על הייצוגים החבויים הללו."
  },
  {
    "type": "mc",
    "question": "כיצד מודל Sharp-It משפר את התוצרים של Shape-E?",
    "options": [
      "הוא משתמש במודל דיפוזיה גדול יותר",
      "הוא מתחיל מטקסט במקום מתמונה",
      "הוא מרנדר את האובייקט מ-Shape-E מכמה זוויות, משפר את התמונות המרונדרות עם מודל דיפוזיה, ובונה מחדש אובייקט משופר מהן",
      "הוא מוסיף גאוסיאנים לאובייקט כדי לשפר את הפירוט"
    ],
    "correctAnswerIndex": 2,
    "explanation": "Sharp-It הוא תהליך חידוד (refinement). הוא לוקח את התוצר הראשוני (שעשוי להיות מטושטש) של Shape-E, מרנדר אותו מכמה זוויות, מעביר את התמונות הדו-ממדיות דרך מודל דיפוזיה כדי לשפר את איכותן ופרטיהן, ואז משתמש בתמונות המשופרות כדי לבצע שחזור (reconstruction) של אובייקט תלת-ממדי חדש ואיכותי יותר."
  },
  {
    "type": "mc",
    "question": "בארכיטקטורת LRM (Large Reconstruction Model), מהו תפקיד ה-Image-to-Triplane Decoder?",
    "options": [
      "לחלץ תכונות מהתמונה באמצעות ViT",
      "לרנדר את התמונה הסופית",
      "לתרגם את תכונות התמונה (image features) לייצוג תלת-ממדי מסוג Triplane",
      "לבצע אופטימיזציה למשקולות ה-NeRF"
    ],
    "correctAnswerIndex": 2,
    "explanation": "הארכיטקטורה מקבלת תמונה, מקודדת אותה לייצוג תכונות באמצעות image encoder, ואז ה-Image-to-Triplane Decoder משתמש בתכונות אלו (יחד עם מידע על המצלמה ו-positional embeddings) כדי לחזות ייצוג Triplane, שהוא ייצוג תלת-ממדי יעיל שממנו ניתן לרנדר את ה-NeRF."
  },
  {
    "type": "mc",
    "question": "באילו נתונים משתמשים כדי לאמן NeRF באופן ראשוני?",
    "options": [
      "סרטון וידאו בודד של האובייקט",
      "אוסף תמונות של האובייקט מזוויות צפייה שונות וידועות",
      "תיאור טקסטואלי מפורט של האובייקט",
      "מודל תלת-ממדי גס מסוג מאש"
    ],
    "correctAnswerIndex": 1,
    "explanation": "האימון הקלאסי של NeRF מתבצע על סט של תמונות (multi-view images) של סצנה סטטית, כאשר מיקום המצלמה עבור כל תמונה ידוע. הרשת לומדת לייצר מחדש את התמונות הללו, ובכך לומדת את הייצוג התלת-ממדי של הסצנה."
  },
  {
    "type": "mc",
    "question": "בנוסחת הפירוק של חיזוי הרעש ב-SDS, מה מייצג הרכיב $s\\delta_C$?",
    "options": [
      "כיוון הסרת הרעש הכללי",
      "כיוון הדומיין (למשל, תמונות ריאליסטיות)",
      "כיוון התנאי (למשל, הטקסט), מוגבר בפקטור s",
      "הרעש האקראי שהוסף לתמונה"
    ],
    "correctAnswerIndex": 2,
    "explanation": "בפירוק $\\epsilon_{\\phi}^{s}(z_{t};y,t)=s\\delta_{C}+\\delta_{N}+\\delta_{D}$, הרכיב $\\delta_C$ הוא הכיוון שנובע מההתניה (למשל, הטקסט y), והוא מוכפל בסקלר s (classifier-free guidance scale) כדי לחזק את השפעת ההתניה על התוצאה הסופית."
  },
  {
    "type": "open",
    "question": "הסבר במילים שלך מהו ייצוג תלת-ממדי מסוג 'מאש' (Mesh) וממה הוא מורכב.",
    "correctAnswerText": "מאש הוא ייצוג מפורש (explicit) של פני שטח של אובייקט תלת-ממדי. הוא מורכב מאוסף של קודקודים (vertices) במרחב, צלעות (edges) המחברות בין זוגות קודקודים, ופאות (faces), לרוב משולשים או מרובעים, המגדירות את המשטח עצמו. זהו הייצוג הנפוץ ביותר בגרפיקה ממוחשבת למודלים ודמויות.",
    "explanation": "התשובה צריכה להזכיר שמדובר בייצוג של פני השטח ולהכיל את שלושת המרכיבים הבסיסיים: קודקודים, צלעות ופאות."
  },
  {
    "type": "open",
    "question": "מדוע צפיפות (density) הפלט של NeRF תלויה רק במיקום (x,y,z) בעוד שהצבע (RGB) תלוי גם בזווית הצפייה (θ,φ)?",
    "correctAnswerText": "הצפיפות היא תכונה פיזיקלית של נקודה במרחב - כמה 'חומר' יש שם. תכונה זו אינה תלויה בכיוון שממנו מסתכלים עליה. לעומת זאת, הצבע יכול להשתנות בהתאם לזווית הצפייה בגלל תופעות כמו השתקפויות (specular reflections) או שקיפות למחצה, שבהן מראה פני השטח משתנה כתלות בזווית בין המשטח, מקור האור והצופה.",
    "explanation": "ההסבר צריך להתבסס על ההיגיון הפיזיקלי: צפיפות היא תכונה אינהרנטית של הנקודה, בעוד שמראה (ולכן צבע) יכול להיות תלוי בזווית בגלל אפקטים של תאורה והשתקפות."
  },
  {
    "type": "open",
    "question": "הסבר בקצרה את תהליך האימון של NeRF קלאסי (ללא שימוש בטקסט).",
    "correctAnswerText": "התהליך מתחיל עם סט תמונות של אובייקט מזוויות צפייה ידועות. עבור כל פיקסל באחת התמונות, 'יורים' קרן מהמצלמה אל תוך הסצנה. דוגמים מספר נקודות לאורך הקרן הזו, ומזינים את הקואורדינטות והכיוון של כל נקודה לרשת ה-NeRF כדי לקבל צבע וצפיפות. לאחר מכן, משתמשים בנוסחת הרינדור הוולומטרי כדי לחשב את צבע הפיקסל הסופי. ההפרש בין הצבע המחושב לצבע האמיתי בפיקסל המקורי משמש כ-loss, והרשת מתעדכנת באמצעות backpropagation כדי למזער את השגיאה הזו על פני כל התמונות.",
    "explanation": "התשובה צריכה לכלול את המרכיבים הבאים: קלט של תמונות מזוויות ידועות, ירי קרניים (ray casting), דגימת נקודות, הרצת הרשת, רינדור וולומטרי, וחישוב loss מול התמונה האמיתית."
  },
  {
    "type": "open",
    "question": "מהי המוטיבציה מאחורי פיתוח שיטת 3D Gaussian Splatting, וכיצד היא פותרת את הבעיה העיקרית של NeRF?",
    "correctAnswerText": "המוטיבציה העיקרית הייתה לפתור את בעיית מהירות הרינדור האיטית של NeRF. NeRF דורש להריץ רשת נוירונים עמוקה עבור מאות נקודות לכל פיקסל בתמונה, מה שהופך את הרינדור בזמן אמת לבלתי אפשרי. Gaussian Splatting פותר זאת על ידי שימוש בייצוג מפורש: הסצנה מיוצגת כאוסף של גאוסיאנים תלת-ממדיים. בזמן הרינדור, במקום לשאול רשת, פשוט 'מטילים' (splatting) את הגאוסיאנים הללו על גבי מסך התמונה הדו-ממדי, תהליך שהוא מהיר משמעותית ומאפשר רינדור בזמן אמת.",
    "explanation": "התשובה צריכה להדגיש את בעיית המהירות של NeRF ואת הפתרון של Gaussian Splatting: מעבר מייצוג מרומז (רשת) לייצוג מפורש (גאוסיאנים) שמאפשר רינדור מהיר יותר."
  },
  {
    "type": "open",
    "question": "מהו הרעיון הבסיסי מאחורי ייצוג מרומז (Implicit Representation) של צורה תלת-ממדית?",
    "correctAnswerText": "במקום לתאר את פני השטח של הצורה באופן ישיר (למשל, על ידי רשימת משולשים), ייצוג מרומז מגדיר פונקציה מתמטית, שלרוב מיושמת על ידי רשת נוירונים. הפונקציה מקבלת כקלט קואורדינטה (x,y,z) במרחב, ומחזירה ערך מסוים. הצורה עצמה מוגדרת באופן עקיף (מרומז) כקבוצת כל הנקודות שעבורן הפונקציה מחזירה ערך ספציפי (למשל, 0 במקרה של SDF).",
    "explanation": "התשובה צריכה להסביר שהצורה לא מתוארת ישירות אלא מוגדרת על ידי פונקציה, והמשטח הוא קבוצת רמה (level-set) של אותה פונקציה."
  },
  {
    "type": "open",
    "question": "כיצד פועל מנגנון הפיצול והשכפול (split and clone) ב-Adaptive Density Control של Gaussian Splatting?",
    "correctAnswerText": "במהלך האופטימיזציה, המנגנון בודק את הגרדיאנטים של הגאוסיאנים. אם גאוסיאן נמצא באזור של 'under-reconstruction' (כלומר, חסר פירוט) והגרדיאנט שלו גדול, המערכת יכולה לשכפל אותו (clone) וליצור עותק קטן יותר באותו מקום. אם הגאוסיאן גדול מדי ועדיין יש לו גרדיאנט גדול, המערכת יכולה לפצל אותו (split) לשני גאוסיאנים קטנים יותר כדי לכסות את האזור בצורה מדויקת יותר.",
    "explanation": "התשובה צריכה להסביר את התנאים לפיצול (גאוסיאן גדול עם גרדיאנט גדול) ושכפול (גאוסיאן קטן עם גרדיאנט גדול) כאמצעי להוספת פירוט היכן שנדרש."
  },
  {
    "type": "open",
    "question": "תאר את התהליך שבו מודל Sharp-It משפר אובייקט שנוצר על ידי Shape-E.",
    "correctAnswerText": "התהליך מורכב משלושה שלבים: 1. רינדור: לוקחים את האובייקט התלת-ממדי הגס מ-Shape-E ומרנדרים אותו מכמה זוויות שונות כדי לקבל סט של תמונות דו-ממדיות. 2. שיפור (Refinement): מעבירים כל תמונה דו-ממדית דרך מודל דיפוזיה חזק (כמו Imagen), שיודע לשפר את האיכות, להוסיף פרטים ולהפוך אותה לריאליסטית יותר. 3. שחזור (Reconstruction): משתמשים בסט התמונות המשופרות כדי לבנות מחדש אובייקט תלת-ממדי חדש ואיכותי יותר.",
    "explanation": "התשובה צריכה לכלול את שלושת השלבים: רינדור ל-2D, שיפור התמונות ה-2D עם דיפוזיה, ושחזור חזרה ל-3D מהתמונות המשופרות."
  },
  {
    "type": "open",
    "question": "מה הבעיה בגישה נאיבית של יצירת טקסטורה לאובייקט על ידי 'הדבקה' של תמונות שנוצרו בנפרד, וכיצד שיטת ה-trimap מנסה לפתור זאת?",
    "correctAnswerText": "הבעיה בגישה נאיבית היא חוסר עקביות (consistency). כל תמונה שנוצרת בנפרד לא 'מכירה' את האחרות, מה שיכול להוביל לחוסר התאמה בתפרים, בתאורה ובטקסטורה בין אזורים שונים באובייקט. שיטת ה-trimap פותרת זאת על ידי תהליך איטרטיבי: היא צובעת חלק מהאובייקט, ואז באיטרציה הבאה היא משתמשת במידע שכבר נצבע (האזור הירוק) כהקשר כדי לצבוע אזורים חדשים (האזור האדום), ובכך שומרת על עקביות לאורך כל תהליך הצביעה.",
    "explanation": "התשובה צריכה להזכיר את בעיית העקביות ולהסביר שה-trimap פותר אותה על ידי שימוש בחלקים שכבר נצבעו כהקשר (context) ליצירת החלקים החדשים."
  },
  {
    "type": "open",
    "question": "מהו ייצוג Triplane ומה יתרונו בארכיטקטורות כמו LRM?",
    "correctAnswerText": "Triplane הוא ייצוג תלת-ממדי יעיל שמורכב משלושה מישורים דו-ממדיים של תכונות (features), בדרך כלל מישורי XY, XZ, ו-YZ. כדי לקבל את התכונה של נקודה (x,y,z) כלשהי במרחב, מבצעים השלכה של הנקודה על כל אחד משלושת המישורים, דוגמים את ערכי התכונות מהם, ומאחדים אותם (למשל על ידי סכום או שרשור). יתרונו הוא שהוא דורש פחות זיכרון וחישוב מאשר רשת תלת-ממדית מלאה (volumetric grid) אך עדיין מאפשר לייצג תכונות תלת-ממדיות מורכבות, מה שהופך אותו ליעיל עבור מודלים שצריכים לחזות שדה עצבי (כמו NeRF) מתמונה בודדת.",
    "explanation": "התשובה צריכה להסביר שה-Triplane מורכב משלושה מישורים של תכונות, כיצד דוגמים ממנו, ואת היתרון שלו ביעילות זיכרון וחישוב לעומת רשת תלת-ממדית מלאה."
  },
  {
    "type": "open",
    "question": "כיצד פועלת נוסחת ה-SDS Loss? הסבר את האינטואיציה מאחורי חיסור הרעש החזוי מהרעש האמיתי.",
    "correctAnswerText": "בכל צעד, מרנדרים תמונה (x) מה-NeRF, מוסיפים לה רעש (ε) כדי לקבל תמונה רועשת ($z_t$), ומבקשים ממודל דיפוזיה קפוא לחזות את הרעש שהוסף ($\\epsilon_{\\phi}$). האינטואיציה היא שהחיזוי של מודל הדיפוזיה, $\\epsilon_{\\phi}$, מצביע לכיוון שבו התמונה תהיה 'יותר הגיונית' או 'יותר דומה לטקסט'. לכן, הביטוי ($\\epsilon_{\\phi} - \\epsilon$) הוא וקטור ה'תיקון'. הוא מייצג את ההבדל בין הרעש שהמודל חושב שצריך להסיר כדי לשפר את התמונה, לבין הרעש האקראי שהוספנו. שימוש בוקטור זה כגרדיאנט דוחף את משקולות ה-NeRF כך שבפעם הבאה הוא ירנדר תמונה (x) שקרובה יותר להתפלגות שהמודל למד.",
    "explanation": "התשובה צריכה להסביר את תהליך הוספת הרעש וחיזויו, ולהתמקד באינטואיציה שחיזוי המודל מצביע על כיוון השיפור, וההפרש מהרעש האמיתי הוא הגרדיאנט שמניע את ה-NeRF בכיוון זה."
  }
]
